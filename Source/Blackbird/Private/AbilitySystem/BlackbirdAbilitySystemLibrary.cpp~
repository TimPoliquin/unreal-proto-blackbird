// Copyright Alien Shores 2025


#include "AbilitySystem/BlackbirdAbilitySystemLibrary.h"

#include "AbilitySystemBlueprintLibrary.h"
#include "AbilitySystemComponent.h"
#include "GameFramework/Character.h"
#include "GameplayAbilitySpec.h"
#include "GameplayEffectExtension.h"
#include "Abilities/GameplayAbility.h"
#include "AbilitySystem/Attribute/BlackbirdAttributeSet.h"

void UBlackbirdAbilitySystemLibrary::ApplyEffectToSelf(
	AActor* Actor,
	const TSubclassOf<UGameplayEffect>& Effect,
	const int32 Level
)
{
	if (!IsValid(Actor))
	{
		return;
	}
	if (!Effect)
	{
		UE_LOG(
			LogTemp,
			Warning,
			TEXT("[UBlackbirdAbilitySystemLibrary::ApplyToSelf] No effect class provided for [%s]"),
			*Actor->GetName()
		)
	}
	if (UAbilitySystemComponent* AbilitySystemComponent = UAbilitySystemBlueprintLibrary::GetAbilitySystemComponent(
		Actor
	))
	{
		FGameplayEffectContextHandle EffectContextHandle = AbilitySystemComponent->MakeEffectContext();
		EffectContextHandle.AddSourceObject(Actor);
		const FGameplayEffectSpecHandle GameplayEffectSpec = AbilitySystemComponent->MakeOutgoingSpec(
			Effect,
			Level,
			EffectContextHandle
		);
		AbilitySystemComponent->ApplyGameplayEffectSpecToTarget(
			*GameplayEffectSpec.Data.Get(),
			AbilitySystemComponent
		);
	}
}

FPredictionKey UBlackbirdAbilitySystemLibrary::GetPredictionKeyFromAbilitySpec(const FGameplayAbilitySpec& AbilitySpec)
{
	if (TArray<UGameplayAbility*> Instances = AbilitySpec.GetAbilityInstances(); Instances.Num() > 0)
	{
		const FGameplayAbilityActivationInfo& ActivationInfo = Instances.Last()->GetCurrentActivationInfoRef();
		return ActivationInfo.GetActivationPredictionKey();
	}
	return FPredictionKey();
}

FGameplayEffectContextHandle UBlackbirdAbilitySystemLibrary::GetEffectContextHandle(
	const FGameplayEffectModCallbackData& Data
)
{
	return Data.EffectSpec.GetContext();
}

UAbilitySystemComponent* UBlackbirdAbilitySystemLibrary::GetEffectSourceAbilitySystemComponent(
	const FGameplayEffectModCallbackData& Data
)
{
	return GetEffectContextHandle(Data).GetOriginalInstigatorAbilitySystemComponent();
}

AActor* UBlackbirdAbilitySystemLibrary::GetEffectSourceAvatarActor(
	const FGameplayEffectModCallbackData& Data
)
{
	if (const UAbilitySystemComponent* AbilitySystemComponent = GetEffectSourceAbilitySystemComponent(Data))
	{
		return AbilitySystemComponent->GetAvatarActor();
	}
	return nullptr;
}

ACharacter* UBlackbirdAbilitySystemLibrary::GetEffectSourceCharacter(const FGameplayEffectModCallbackData& Data)
{
	if (const AController* Controller = GetEffectSourceController(Data))
	{
		return Controller->GetCharacter();
	}
	return nullptr;
}

AController* UBlackbirdAbilitySystemLibrary::GetEffectSourceController(
	const FGameplayEffectModCallbackData& Data
)
{
	if (const UAbilitySystemComponent* AbilitySystemComponent = GetEffectSourceAbilitySystemComponent(Data))
	{
		if (APlayerController* PlayerController = AbilitySystemComponent->AbilityActorInfo->PlayerController.Get())
		{
			return PlayerController;
		}
		if (const APawn* SourcePawn = Cast<APawn>(AbilitySystemComponent->GetAvatarActor()))
		{
			return SourcePawn->GetController();
		}
	}
	return nullptr;
}

AActor* UBlackbirdAbilitySystemLibrary::GetEffectTargetAvatarActor(const FGameplayEffectModCallbackData& Data)
{
	return Data.Target.AbilityActorInfo->AvatarActor.Get();
}

AController* UBlackbirdAbilitySystemLibrary::GetEffectTargetController(const FGameplayEffectModCallbackData& Data)
{
	return Data.Target.AbilityActorInfo->PlayerController.Get();
}

ACharacter* UBlackbirdAbilitySystemLibrary::GetEffectTargetCharacter(const FGameplayEffectModCallbackData& Data)
{
	return Cast<ACharacter>(GetEffectTargetAvatarActor(Data));
}

UAbilitySystemComponent* UBlackbirdAbilitySystemLibrary::GetEffectTargetAbilitySystemComponent(
	const FGameplayEffectModCallbackData& Data
)
{
	return UAbilitySystemBlueprintLibrary::GetAbilitySystemComponent(
		GetEffectTargetAvatarActor(Data)
	);
}

bool UBlackbirdAbilitySystemLibrary::IsAlive(AActor* Actor)
{
	if (const UAbilitySystemComponent* AbilitySystemComponent =
		UAbilitySystemBlueprintLibrary::GetAbilitySystemComponent(Actor))
	{
		if (const UBlackbirdAttributeSet* AttributeSet = Cast<UBlackbirdAttributeSet>(
			AbilitySystemComponent->GetAttributeSet(UBlackbirdAttributeSet::StaticClass())
		))
		{
			return AttributeSet->IsAlive();
		}
	}
	return false;
}

bool UBlackbirdAbilitySystemLibrary::IsDead(AActor* Actor)
{
	if (const UAbilitySystemComponent* AbilitySystemComponent =
		UAbilitySystemBlueprintLibrary::GetAbilitySystemComponent(Actor))
	{
		if (const UBlackbirdAttributeSet* AttributeSet = Cast<UBlackbirdAttributeSet>(
			AbilitySystemComponent->GetAttributeSet(UBlackbirdAttributeSet::StaticClass())
		))
		{
			return AttributeSet->IsDead();
		}
	}
	return true;
}
